package codes.quine.labo.lite.romaji

/** Constant values for romaji-kana transliteration. */
private object Constant {

  /** A mapping from a kana to romaji. */
  val KanaToRomaji: Map[String, Seq[String]] = Map(
    "ア" -> Seq("a"),
    "イ" -> Seq("i"),
    "ウ" -> Seq("u"),
    "エ" -> Seq("e"),
    "オ" -> Seq("o"),
    "ァ" -> Seq("xa"),
    "ィ" -> Seq("xi"),
    "ゥ" -> Seq("xu"),
    "ェ" -> Seq("xe"),
    "ォ" -> Seq("xo"),
    "カ" -> Seq("ka", "ca"),
    "キ" -> Seq("ki"),
    "ク" -> Seq("ku"),
    "ケ" -> Seq("ke"),
    "コ" -> Seq("ko", "co"),
    "サ" -> Seq("sa"),
    "シ" -> Seq("shi", "si"),
    "ス" -> Seq("su"),
    "セ" -> Seq("se"),
    "ソ" -> Seq("so"),
    "タ" -> Seq("ta"),
    "チ" -> Seq("chi", "ti", "ci"),
    "ツ" -> Seq("tsu", "tu"),
    "テ" -> Seq("te"),
    "ト" -> Seq("to"),
    "ッ" -> Seq("xtsu"),
    "ナ" -> Seq("na"),
    "ニ" -> Seq("ni"),
    "ヌ" -> Seq("nu"),
    "ネ" -> Seq("ne"),
    "ノ" -> Seq("no"),
    "ハ" -> Seq("ha"),
    "ヒ" -> Seq("hi"),
    "フ" -> Seq("fu", "hu"),
    "ヘ" -> Seq("he"),
    "ホ" -> Seq("ho"),
    "マ" -> Seq("ma"),
    "ミ" -> Seq("mi"),
    "ム" -> Seq("mu"),
    "メ" -> Seq("me"),
    "モ" -> Seq("mo"),
    "ヤ" -> Seq("ya"),
    "ユ" -> Seq("yu"),
    "ヨ" -> Seq("yo"),
    "ラ" -> Seq("ra"),
    "リ" -> Seq("ri"),
    "ル" -> Seq("ru"),
    "レ" -> Seq("re"),
    "ロ" -> Seq("ro"),
    "ワ" -> Seq("wa"),
    "ウィ" -> Seq("wi"),
    "ウェ" -> Seq("we"),
    "ヲ" -> Seq("wo"),
    "ン" -> Seq("n", "nn"),
    "ー" -> Seq("-"),
    "ガ" -> Seq("ga"),
    "ギ" -> Seq("gi"),
    "グ" -> Seq("gu"),
    "ゲ" -> Seq("ge"),
    "ゴ" -> Seq("go"),
    "ザ" -> Seq("za"),
    "ジ" -> Seq("ji", "zi"),
    "ズ" -> Seq("zu"),
    "ゼ" -> Seq("ze"),
    "ゾ" -> Seq("zo"),
    "ダ" -> Seq("da"),
    "ヂ" -> Seq("di"),
    "ヅ" -> Seq("du"),
    "デ" -> Seq("de"),
    "ド" -> Seq("do"),
    "バ" -> Seq("ba"),
    "ビ" -> Seq("bi"),
    "ブ" -> Seq("bu"),
    "ベ" -> Seq("be"),
    "ボ" -> Seq("bo"),
    "パ" -> Seq("pa"),
    "ピ" -> Seq("pi"),
    "プ" -> Seq("pu"),
    "ペ" -> Seq("pe"),
    "ポ" -> Seq("po"),
    "キャ" -> Seq("kya"),
    "キュ" -> Seq("kyu"),
    "キェ" -> Seq("kye"),
    "キョ" -> Seq("kyo"),
    "ギャ" -> Seq("gya"),
    "ギュ" -> Seq("gyu"),
    "ギェ" -> Seq("gye"),
    "ギョ" -> Seq("gyo"),
    "シャ" -> Seq("sha", "sya"),
    "シュ" -> Seq("shu", "syu"),
    "シェ" -> Seq("she", "sye"),
    "ショ" -> Seq("sho", "syo"),
    "ジャ" -> Seq("ja", "jya", "zya"),
    "ジュ" -> Seq("ju", "jyu", "zyu"),
    "ジェ" -> Seq("je", "jye", "zye"),
    "ジョ" -> Seq("jo", "jyo", "zyo"),
    "チャ" -> Seq("cha", "cya", "tya"),
    "チュ" -> Seq("chu", "cyu", "tyu"),
    "チェ" -> Seq("che", "cye", "tye"),
    "チョ" -> Seq("cho", "cyo", "tyo"),
    "ヂャ" -> Seq("dya"),
    "ヂュ" -> Seq("dyu"),
    "ヂェ" -> Seq("dye"),
    "ヂョ" -> Seq("dyo"),
    "テャ" -> Seq("tha"),
    "ティ" -> Seq("thi"),
    "テュ" -> Seq("thu"),
    "テョ" -> Seq("tho"),
    "トァ" -> Seq("twa"),
    "トィ" -> Seq("twi"),
    "トゥ" -> Seq("twu"),
    "トェ" -> Seq("twe"),
    "トォ" -> Seq("two"),
    "ドァ" -> Seq("dwa"),
    "ドィ" -> Seq("dwi"),
    "ドゥ" -> Seq("dwu"),
    "ドェ" -> Seq("dwe"),
    "ドォ" -> Seq("dwo"),
    "ニャ" -> Seq("nya"),
    "ニュ" -> Seq("nyu"),
    "ニェ" -> Seq("nye"),
    "ニョ" -> Seq("nyo"),
    "ヒャ" -> Seq("hya"),
    "ヒュ" -> Seq("hyu"),
    "ヒェ" -> Seq("hye"),
    "ヒョ" -> Seq("hyo"),
    "ビャ" -> Seq("bya"),
    "ビュ" -> Seq("byu"),
    "ビェ" -> Seq("bye"),
    "ビョ" -> Seq("byo"),
    "ピャ" -> Seq("pya"),
    "ピュ" -> Seq("pyu"),
    "ピェ" -> Seq("pye"),
    "ピョ" -> Seq("pyo"),
    "ファ" -> Seq("fa"),
    "フィ" -> Seq("fi"),
    "フェ" -> Seq("fe"),
    "フォ" -> Seq("fo"),
    "ミャ" -> Seq("mya"),
    "ミュ" -> Seq("myu"),
    "ミェ" -> Seq("mye"),
    "ミョ" -> Seq("myo"),
    "リャ" -> Seq("rya"),
    "リュ" -> Seq("ryu"),
    "リェ" -> Seq("rye"),
    "リョ" -> Seq("ryo"),
    "ヴァ" -> Seq("va"),
    "ヴィ" -> Seq("vi"),
    "ヴ" -> Seq("vu"),
    "ヴェ" -> Seq("ve"),
    "ヴォ" -> Seq("vo"),
    "デャ" -> Seq("dha"),
    "ディ" -> Seq("dhi"),
    "デュ" -> Seq("dhu"),
    "デェ" -> Seq("dhe"),
    "デョ" -> Seq("dho")
  )

  /** A mapping from romaji to kana */
  val RomajiToKana: Map[String, String] =
    KanaToRomaji.iterator.flatMap { case (k, rs) => rs.map(_ -> k) }.toMap

  /** The maximum length of kana sequence. */
  val MaxKanaLength: Int = KanaToRomaji.keys.map(_.length).max

  /** The maximum length of romaji sequence. */
  val MaxRomajiLength: Int = RomajiToKana.keys.map(_.length).max
}
